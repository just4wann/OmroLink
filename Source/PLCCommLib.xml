<?xml version="1.0"?>
<doc>
<assembly>
<name>
PLCCommLib
</name>
</assembly>
<members>
<member name="F:PLCCommLib.PLC_HiLink.DEV_R">
	<summary>R リレー</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_B">
	<summary>B リンクリレー</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_MR">
	<summary>MR 内部補助リレー</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_LR">
	<summary>LR ラッチリレー</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CR">
	<summary>CR コントロールリレー</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_VB">
	<summary>VB ワークリレー</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_DM">
	<summary>DM データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_EM">
	<summary>EM 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_FM">
	<summary>FM ファイルレジスタ(カレント)</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_ZF">
	<summary>ZF ファイルレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_W">
	<summary>W リンクレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_TM">
	<summary>TM テンポラリデータメモリ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_Z">
	<summary>Z インデックスレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_T">
	<summary>T タイマ接点</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_TC">
	<summary>TC タイマ現在値</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_TS">
	<summary>TS タイマ設定値</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_C">
	<summary>C カウンタ接点</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CC">
	<summary>CC カウンタ現在値</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CS">
	<summary>CS カウンタ設定値</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CTH">
	<summary>CTH 高速カウンタ接点</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CTHC">
	<summary>CTHC 高速カウンタ現在値  *現在値は接点読出のデバイスを指定する必要あり</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CTHS">
	<summary>CTHS 高速カウンタ設定値  *設定値は接点読出のデバイスを指定する必要あり</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CTC">
	<summary>CTC 高速カウンタ・コンパレータ接点</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CTCC">
	<summary>CTCC 高速カウンタ・コンパレータ現在値    *現在値は接点読出のデバイスを指定する必要あり</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CTCS">
	<summary>CTCS 高速カウンタ・コンパレータ設定値    *設定値は接点読出のデバイスを指定する必要あり</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_AT">
	<summary>AT デジタルトリマ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_CM">
	<summary>CM コントロールメモリ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DEV_VM">
	<summary>VM ワークメモリ</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DeviceCodeType.fBitDev">
	<summary>ビットデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DeviceCodeType.fWordDev">
	<summary>ワードデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DeviceCodeType.fBitOK">
	<summary>ビットデバイスかワードのビット指定でTrue</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DeviceCodeType.fWordOK">
	<summary>ワードデバイスかビットの16倍数区切りでTrue</summary>
</member><member name="F:PLCCommLib.PLC_HiLink.DeviceCodeType.fHex">
	<summary>デバイス番号の16進数指定でTrue</summary>
</member><member name="T:PLCCommLib.PLC_HiLink.DeviceCodeType">
	<summary>デバイス種別チェック用構造体</summary>
</member><member name="M:PLCCommLib.PLC_HiLink.#ctor">
	<summary>既定のコンストラクタ</summary>
</member><member name="P:PLCCommLib.PLC_HiLink.VenderName">
	<summary>PLCベンダ名を返す</summary>
	<remarks>VenderNames.KEYENCE(2)</remarks>
</member><member name="P:PLCCommLib.PLC_HiLink.ProtocolName">
	<summary>プロトコル名を返す</summary>
	<remarks>VenderNames.HiLink(2)</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.Open">
	<summary>通信回線のオープン処理</summary>
	<returns>正常終了で0を返す</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.ReadDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括読出</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.WriteDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の書込点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.SetBit(System.String)">
	<summary>ビットデバイスのセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.ResetBit(System.String)">
	<summary>ビットデバイスのリセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.InverseBit(System.String)">
	<summary>ビットデバイスの反転</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>プロトコル的にビット反転は不可なのでいったん読出後にセットorリセットを判別</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.ReadDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム読出</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>ランダム読出の機能はプロトコル的にサポートされていないため、内部処理にて1点ずつ読出</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.WriteDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム書込</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>ランダム書込の機能はプロトコル的にサポートされていないため、内部処理にて1点ずつ書込</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.GetAvailableDeviceInfo">
	<summary>通信メソッドで利用可能なデバイス情報を取得</summary>
	<remarks>デバイス情報構造体の配列</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.SeparateDevice(System.String,System.Int32@,System.Int32@,System.Int32@)">
	<summary>デバイス名(文字列)をタイプと番号(数値)に変換</summary>
	<param name="Device">デバイス文字列</param>
	<param name="DevTyp">(出力)デバイス種別</param>
	<param name="DevNum">(出力)デバイス チャネル番号</param>
	<param name="BitNum">(出力)デバイス ビット番号 *ワードデバイスのBitアクセスのみ0～15、それ以外-1</param>
	<returns>変換OKでTrue、指定デバイス以外はFalse</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.IsBitDevice(System.String)">
	<summary>デバイス文字列がビットデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ビットデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.IsWordDevice(System.String)">
	<summary>デバイス文字列がワードデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.IsWordAvailable(System.String)">
	<summary>デバイス文字列が通信メソッドでワードデバイス扱い可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
	<remarks>ワードデバイスかビットデバイスのビット番号が0でTrueを返す</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.RemakeDevice(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える(桁数等)</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">(Optional)デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.RemakeDeviceWord(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎にワード単位で整える *通信用</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">デバイス番号(チャネル単位)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.AdjustWordDevice(System.String)">
	<summary>ビットデバイスの文字列を番号が16の倍数又はビット番号0に揃える</summary>
	<param name="Device">ビットデバイス文字列</param>
	<returns>ワードデバイス扱い可能なデバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.JudgeDeviceType(System.Int32,System.Int32,System.Int32)">
	<summary>デバイスがビットかワードかワードのビットかを判別</summary>
	<param name="typ">SeparateDeviceで返されるデバイス種別</param>
	<param name="num">SeparateDeviceで返されるデバイス番号</param>
	<param name="bit">SeparateDeviceで返されるビット番号</param>
	<returns>DeviceCodeType構造体</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.GetAccessLength(System.Int32)">
	<summary>1回の交信でアクセス可能な点数を取得</summary>
	<param name="typ">IPLCComm_DivideAddressで返されるデバイス種別</param>
	<returns>アクセス可能な点数</returns>
	<remarks>KV-3000/5000/7000シリーズの場合。KV-Nano等の別シリーズの場合は点数が異なる。</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.MakeCommandData(System.String)">
	<summary>送信用コマンドデータの作成</summary>
	<param name="cmd">コマンド</param>
	<returns>送信バッファの格納数(Byte単位)</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.SetSendBufForDeviceInfo(System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>送信バッファにデバイス情報を格納</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="typ">デバイス種別</param>
	<param name="num">デバイス番号</param>
	<param name="fHex">デバイス番号が16進数でTrue</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.SetSendBufForStringInfo(System.Int32,System.String)">
	<summary>送信バッファに文字列データを格納</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="data">データ文字列</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.SetSendBufForDataInfo(System.Int32,System.Int32)">
	<summary>送信バッファにデータを格納</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="data">数値データ</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.SendData(System.Int32)">
	<summary>データ送信</summary>
	<param name="length">送信データ(Byte単位)</param>
	<returns>成功で0を返す</returns>
</member><member name="M:PLCCommLib.PLC_HiLink.WriteBitDevice(System.String,System.Boolean)">
	<summary>ビットデバイス1点の書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="fSet">0以外でSet、0でReset</param>
	<returns>正常で0を返す(異常時はエラーコード)</returns>
	<remarks></remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.RemakeDevice(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える</summary>
	<param name="DevTyp">デバイス種別</param>
	<param name="DevNum">デバイス番号</param>
	<param name="BitNum">デバイス ビット番号 *WordのBitアクセスのみ0～15、それ以外-1</param>
	<param name="Offset">デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>オフセット値を加味してデバイス番号の最小値を下回る場合(負数もありえる)は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_HiLink.GetDeviceCode(System.Int32)">
	<summary>上位リンク用のデバイスコードを取得</summary>
	<param name="DevTyp">デバイス種別</param>
	<returns>上位リンク用デバイスコード</returns>
</member><member name="T:PLCCommLib.PLC_HiLink">
	<summary>KEYENCE 上位リンク(Ethernet)の通信クラス</summary>
	<remarks>
 KV-3000/5000/7000シリーズに対応。多分KV-8000シリーズでも使える。
 KV-Nanoの場合は交信1回の点数が異なるので少ない点数なら使えるかも。
 プロトコル的にランダム読出・書込が無い。
 タイマや高速カウンタ、デジタルトリマの32Bitには未対応(16Bitアクセスのみ)。
 </remarks>
</member><member name="F:PLCCommLib.PLCComm.BIT_SEPARATOR">
	<summary>ワードデバイスのビット指定区切り文字</summary>
</member><member name="F:PLCCommLib.PLCComm.DEF_BUFF_SIZE">
	<summary>送受信バッファの既定バイトサイズ</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_COMPLETED">
	<summary>通信メソッドの戻り値: 正常終了(0)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_PARAMETER_ERROR">
	<summary>通信メソッドの戻り値: PLC Vender/Protocolの設定エラー(0x01000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_CONNECTION_TIMEOUT">
	<summary>通信メソッドの戻り値: Open時のconnectタイムアウト(0x02000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_SEND_FAILURED">
	<summary>通信メソッドの戻り値: 送信エラー(0x03000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_COMMUNICATION_TIMEOUT">
	<summary>通信メソッドの戻り値: 受信タイムアウト(0x04000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_NOT_OPENED">
	<summary>通信メソッドの戻り値: 通信メソッドの呼び出し時に回線Openしていない(0x05000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_INVALID_ARGUMENT">
	<summary>通信メソッドの戻り値: 無効な引数(NULL又はサイズ異常)が指定された(0x06000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_HEADER_INFO_ERROR">
	<summary>通信メソッドの戻り値: ヘッダー情報異常(0x07000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_RECV_LENGTH_ERROR">
	<summary>通信メソッドの戻り値: 受信データ数異常(0x08000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_DEVICE_CODE_ERROR">
	<summary>通信メソッドの戻り値: 範囲外又は使用できない(ビットアクセス関数でのワード指定等)デバイスコードが指定された(0x09000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.RET_FINS_FLAME_ERROR">
	<summary>通信メソッドの戻り値: FINSフレームエラー通知を受信(接続をClose)(0x0A000000)</summary>
</member><member name="F:PLCCommLib.PLCComm.VenderNames.MITSUBISHI">
	<summary>三菱(0)</summary>
</member><member name="F:PLCCommLib.PLCComm.VenderNames.OMRON">
	<summary>OMRON(1)</summary>
</member><member name="F:PLCCommLib.PLCComm.VenderNames.KEYENCE">
	<summary>KEYENCE(2)</summary>
</member><member name="T:PLCCommLib.PLCComm.VenderNames">
	<summary>PLCのベンダ名(メーカ名)</summary>
</member><member name="F:PLCCommLib.PLCComm.ProtocolNames.MC3E">
	<summary>MCプロトコル 3Eフレーム(0)</summary>
</member><member name="F:PLCCommLib.PLCComm.ProtocolNames.FINS">
	<summary>FINSコマンド(1)</summary>
</member><member name="F:PLCCommLib.PLCComm.ProtocolNames.HiLink">
	<summary>上位リンク(KEYENCE)(2)</summary>
</member><member name="T:PLCCommLib.PLCComm.ProtocolNames">
	<summary>通信プロトコル名</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.Sock">
	<summary>通信ソケットクラス</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.ManEvt">
	<summary>TCP Connectイベント用</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.fOpened">
	<summary>回線Open状態フラグ</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.Bufs">
	<summary>送信バッファ</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.Bufr">
	<summary>受信バッファ</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.Elapsed">
	<summary>通信処理時間をms単位で保持</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.fLog">
	<summary>False=通信ログ保存しない, True=保存する</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationInformation.LogPath">
	<summary>通信ログファイルの保存先フォルダのパス</summary>
</member><member name="T:PLCCommLib.PLCComm.CommunicationInformation">
	<summary>通信情報構造体</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationParameter.Timeout">
	<summary>送受信タイムアウト(ms単位)</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationParameter.IPAddress">
	<summary>接続先PLCのIP "192.168.1.1"の形式</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationParameter.Port">
	<summary>接続先PLCのポート番号</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationParameter.Bind">
	<summary>PC側のポート番号 *通常は0</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationParameter.fUdp">
	<summary>Fase=TCP, True=UDP</summary>
</member><member name="F:PLCCommLib.PLCComm.CommunicationParameter.fAscii">
	<summary>False=Binary, True=Ascii</summary>
</member><member name="T:PLCCommLib.PLCComm.CommunicationParameter">
	<summary>通信パラメータ構造体</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.Network">
	<summary>ネットワーク番号</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.PC">
	<summary>PC番号</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.RequestIO">
	<summary>要求先ユニットI/O番号</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.RequestSTN">
	<summary>要求先ユニット局番号</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.CPUCheck">
	<summary>CPU監視タイマ</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.DNA">
	<summary>送信先FINSネットワークアドレス</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.DA1">
	<summary>送信先FINSノードアドレス</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.DA2">
	<summary>送信先号機アドレス</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.sa1">
	<summary>送信元FINSノードアドレス *TCPはPLCに問合せ、UDPはIPの末尾を使う</summary>
</member><member name="F:PLCCommLib.PLCComm.RouteParameter.CPU">
	<summary>CPU番号</summary>
</member><member name="T:PLCCommLib.PLCComm.RouteParameter">
	<summary>通信経路パラメータ構造体</summary>
</member><member name="F:PLCCommLib.PLCComm.__CtrlCode">
	<summary>通信ログの制御コード文字列テーブル</summary>
	<remarks>Asciiのみ</remarks>
</member><member name="F:PLCCommLib.PLCComm.DeviceInformation.Name">
	<summary>(表示用)デバイス名</summary>
</member><member name="F:PLCCommLib.PLCComm.DeviceInformation.ComName">
	<summary>通信時に指定するデバイス名</summary>
</member><member name="F:PLCCommLib.PLCComm.DeviceInformation.Description">
	<summary>デバイスの説明</summary>
</member><member name="F:PLCCommLib.PLCComm.DeviceInformation.fHex">
	<summary>デバイス番号が16進数でTrue</summary>
</member><member name="F:PLCCommLib.PLCComm.DeviceInformation.fBit">
	<summary>ビットデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLCComm.DeviceInformation.fWord">
	<summary>ワードデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLCComm.DeviceInformation.fWordBit">
	<summary>ワードのビット扱い可能でTrue(D1000.0など)</summary>
</member><member name="T:PLCCommLib.PLCComm.DeviceInformation">
	<summary>デバイス情報構造体(種別文字、説明等)</summary>
	<remarks>GetAvailableDeviceInfoメソッドの戻り値</remarks>
</member><member name="M:PLCCommLib.PLCComm.#ctor">
	<summary>既定のコンストラクタ &gt;&gt;&gt; インスタンス生成不可</summary>
	<remarks>派生クラス(PLC_****クラス)のインスタンスを生成してください。</remarks>
</member><member name="M:PLCCommLib.PLCComm.Finalize">
	<summary>ファイナライザ &gt;&gt;&gt; 通信回線閉じる</summary>
</member><member name="P:PLCCommLib.PLCComm.VenderName">
	<summary>ベンダ名を返す</summary>
	<remarks>MITSUBISHI(0) or OMRON(1) or KEYENCE(2) のいずれか</remarks>
</member><member name="P:PLCCommLib.PLCComm.ProtocolName">
	<summary>プロトコル名を返す</summary>
	<remarks>MC3E(0) or FINS(1) or HiLink(2) のいずれか</remarks>
</member><member name="P:PLCCommLib.PLCComm.IsLogging">
	<summary>通信ログ保存の取得・設定</summary>
	<value>False:保存しない、True:保存する</value>
	<returns>False:保存しない、True:保存する</returns>
	<remarks>ファイル名は"ComLog_yyyyMMdd.log"で固定。(例: ComLog_20191231.log)</remarks>
</member><member name="P:PLCCommLib.PLCComm.LogPath">
	<summary>通信ログ保存先フォルダの取得・設定</summary>
	<value>保存先フォルダ名</value>
	<returns>保存先フォルダ名</returns>
	<remarks>既定値はデスクトップ</remarks>
</member><member name="P:PLCCommLib.PLCComm.Timeout">
	<summary>通信Timeout(ms単位)を取得・設定</summary>
	<value>通信Timeout値(ms単位)</value>
	<returns>通信Timeout値(ms単位)</returns>
	<remarks>既定値は3000ms。常時変更は可能だが、通信回線オープン時のみ反映。</remarks>
</member><member name="P:PLCCommLib.PLCComm.IPAddress">
	<summary>接続先PLCのIPアドレスを取得・設定</summary>
	<value>IPアドレス文字列("192.168.1.1"の形式)</value>
	<returns>IPアドレス文字列("192.168.1.1"の形式)</returns>
	<remarks>既定値は"192.168.1.1"。通信回線オープン時は変更不可。</remarks>
</member><member name="P:PLCCommLib.PLCComm.PortNumber">
	<summary>接続先PLCのポート番号を取得・設定</summary>
	<value>ポート番号(0～65535)</value>
	<returns>ポート番号(0～65535)</returns>
	<remarks>既定値はMCプロトコル=5000, FINS=9600, 上位リンク=8501。通信回線オープン時は変更不可。</remarks>
</member><member name="P:PLCCommLib.PLCComm.BindPort">
	<summary>PC側のポート番号を取得・設定</summary>
	<value>ポート番号(0～65535)</value>
	<returns>ポート番号(0～65535)</returns>
	<remarks>三菱E71の自動オープン以外のUDPを使う場合のみ指定。通常は0。通信回線オープン時は変更不可。</remarks>
</member><member name="P:PLCCommLib.PLCComm.IsUdp">
	<summary>TCP or UDPを取得・設定</summary>
	<value>False=TCP, True=UDP</value>
	<returns>False=TCP, True=UDP</returns>
	<remarks>既定値はTCP(False)。通信回線オープン時は変更不可。</remarks>
</member><member name="P:PLCCommLib.PLCComm.IsAscii">
	<summary>Binary or Asciiを取得・設定</summary>
	<value>False=Binary, True=Ascii</value>
	<returns>False=Binary, True=Ascii</returns>
	<remarks>既定値はMCプロトコル=Binary(False), FINS=Binary(False), 上位リンク=Ascii(True)。通信回線オープン時は変更不可。</remarks>
</member><member name="P:PLCCommLib.PLCComm.NetworkNumber">
	<summary>ネットワーク番号を取得・設定</summary>
	<value>ネットワーク番号(0～255)</value>
	<returns>ネットワーク番号(0～255)</returns>
	<remarks>MCプロトコルのみ。既定値は0。</remarks>
</member><member name="P:PLCCommLib.PLCComm.PCNumber">
	<summary>PC番号を取得・設定</summary>
	<value>PC番号(0～255)</value>
	<returns>PC番号(0～255)</returns>
	<remarks>MCプロトコルのみ。既定値は0xFF(255)。</remarks>
</member><member name="P:PLCCommLib.PLCComm.ReqUnitIONumber">
	<summary>要求先ユニットI/O番号を取得・設定</summary>
	<value>要求先ユニットI/O番号(0～0x03FF)</value>
	<returns>要求先ユニットI/O番号(0～0x03FF)</returns>
	<remarks>MCプロトコルのみ。既定値は0x03FF。</remarks>
</member><member name="P:PLCCommLib.PLCComm.ReqUnitStnNumber">
	<summary>要求先ユニット局番号を取得・設定</summary>
	<value>要求先ユニット局番号(0～31)</value>
	<returns>要求先ユニット局番号(0～31)</returns>
	<remarks>MCプロトコルのみ。既定値は0。</remarks>
</member><member name="P:PLCCommLib.PLCComm.CPUCheckTime">
	<summary>CPU監視タイマ(250ms単位)を取得・設定</summary>
	<value>CPU監視タイマ(0～65535)</value>
	<returns>CPU監視タイマ(0～65535)</returns>
	<remarks>MCプロトコルのみ。既定値は8(250×8=2000ms)。</remarks>
</member><member name="P:PLCCommLib.PLCComm.DNA">
	<summary>送信先FINSネットワークアドレス(DNA)を取得・設定</summary>
	<value>送信先FINSネットワークアドレス(0:自ネットワーク、1～127:送信先ネットワーク)</value>
	<returns>送信先FINSネットワークアドレス(0:自ネットワーク、1～127:送信先ネットワーク)</returns>
	<remarks>FINSのみ。既定値は0。</remarks>
</member><member name="P:PLCCommLib.PLCComm.DA1">
	<summary>送信先FINSノードアドレス(DA1)を取得・設定</summary>
	<value>送信先FINSノードアドレス(0:自PLC内、1～254:送信先ノード、255:一斉同報)</value>
	<returns>送信先FINSノードアドレス(0:自PLC内、1～254:送信先ノード、255:一斉同報)</returns>
	<remarks>FINSのみ。既定値は0。</remarks>
</member><member name="P:PLCCommLib.PLCComm.DA2">
	<summary>送信先号機アドレス(DA2)を取得・設定</summary>
	<value>送信先号機アドレス(0:PLC、0x10～0x1F:CPU高機能、0xE1:INNER、0xFE:ネットワークのユニット)</value>
	<returns>送信先号機アドレス(0:PLC、0x10～0x1F:CPU高機能、0xE1:INNER、0xFE:ネットワークのユニット)</returns>
	<remarks>FINSのみ。既定値は0。</remarks>
</member><member name="P:PLCCommLib.PLCComm.SA1">
	<summary>送信元FINSノードアドレス(SA1)を取得・設定</summary>
	<value>送信元FINSノードアドレス(SA1)(0:自PLC内、1～254:送信先ノード、255:一斉同報)</value>
	<returns>送信元FINSノードアドレス(SA1)(0:自PLC内、1～254:送信先ノード、255:一斉同報)</returns>
	<remarks>FINSのみ、内部処理にて決めるので外部からは設定しない</remarks>
</member><member name="M:PLCCommLib.PLCComm.IsOpened">
	<summary>通信回線のオープン状態を取得</summary>
	<returns>Trueで回線オープン</returns>
</member><member name="M:PLCCommLib.PLCComm.Open">
	<summary>通信回線のオープン処理</summary>
	<returns>正常終了で0を返す</returns>
</member><member name="M:PLCCommLib.PLCComm.ConnectionCallback(System.IAsyncResult)">
	<summary>Socket.BeginConnect()のコールバックメソッド</summary>
	<param name="result"></param>
</member><member name="M:PLCCommLib.PLCComm.Close">
	<summary>通信回線のクローズ処理</summary>
	<returns>正常終了で0を返す</returns>
</member><member name="M:PLCCommLib.PLCComm.ReadDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括読出</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLCComm.WriteDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の書込点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLCComm.SetBit(System.String)">
	<summary>ビットデバイスのセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLCComm.ResetBit(System.String)">
	<summary>ビットデバイスのリセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLCComm.InverseBit(System.String)">
	<summary>ビットデバイスの反転</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>プロトコル的にビット反転は不可なのでいったん読出後にセットorリセットを判別</remarks>
</member><member name="M:PLCCommLib.PLCComm.ReadDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム読出</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLCComm.WriteDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム書込</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLCComm.GetLastProcessingTime">
	<summary>前回通信処理時間(ms単位)の取得</summary>
	<returns>通信処理時間(ms単位)</returns>
</member><member name="M:PLCCommLib.PLCComm.GetAvailableDeviceInfo">
	<summary>通信メソッドで利用可能なデバイス情報を取得</summary>
	<remarks>デバイス情報構造体の配列</remarks>
</member><member name="M:PLCCommLib.PLCComm.SeparateDevice(System.String,System.Int32@,System.Int32@,System.Int32@)">
	<summary>デバイス名(文字列)をタイプと番号(数値)に変換</summary>
	<param name="Device">デバイス文字列</param>
	<param name="DevTyp">(出力)デバイス種別</param>
	<param name="DevNum">(出力)デバイス チャネル番号</param>
	<param name="BitNum">(出力)デバイス ビット番号 *ワードデバイスのBitアクセスのみ0～15、それ以外-1</param>
	<returns>変換OKでTrue、指定デバイス以外はFalse</returns>
</member><member name="M:PLCCommLib.PLCComm.IsDevice(System.String)">
	<summary>デバイス文字列がデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ビットデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLCComm.IsBitDevice(System.String)">
	<summary>デバイス文字列がビットデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ビットデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLCComm.IsWordDevice(System.String)">
	<summary>デバイス文字列がワードデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLCComm.IsWordAvailable(System.String)">
	<summary>デバイス文字列が通信メソッドでワードデバイス扱い可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
	<remarks>ワードデバイスかビットデバイスの番号が16の倍数又はビット番号が0でTrueを返す</remarks>
</member><member name="M:PLCCommLib.PLCComm.RemakeDevice(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える(桁数等)</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">(Optional)デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLCComm.RemakeDeviceWord(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎にワード単位で整える *通信用</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">デバイス番号(チャネル単位)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLCComm.AdjustWordDevice(System.String)">
	<summary>ビットデバイスの文字列を番号が16の倍数又はビット番号0に揃える</summary>
	<param name="Device">ビットデバイス文字列</param>
	<returns>ワードデバイス扱い可能なデバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLCComm.SendData(System.Int32)">
	<summary>データ送信</summary>
	<param name="length">送信データ(Byte単位)</param>
	<returns>成功で0を返す</returns>
	<remarks></remarks>
</member><member name="M:PLCCommLib.PLCComm.ReceiveWithTimeoutChecking(System.Int32@)">
	<summary>受信とタイムアウト監視</summary>
	<param name="recvlen">(出力)受信データバイト数</param>
	<returns>成功で0を返す</returns>
	<remarks></remarks>
</member><member name="M:PLCCommLib.PLCComm.SaveLoggingData(System.Int32,System.Int32)">
	<summary>通信ログの保存処理</summary>
	<param name="type">0:Connect, 1:Disconnect, 2:Send, 3: Send失敗, 4:Recv, 5:Recv失敗</param>
	<param name="size">送受信のバイト数(Connect,Disconnectは無視)</param>
</member><member name="T:PLCCommLib.PLCComm">
	<summary>PLC通信基本クラス(インスタンス生成不可)</summary>
	<remarks>派生クラス(PLC_****クラス)のインスタンスを生成してください。</remarks>
</member><member name="F:PLCCommLib.PLC_MC.DEV_SM">
	<summary>SM 特殊リレー</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_SD">
	<summary>SD 特殊レジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_X">
	<summary>X* 入力</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_Y">
	<summary>Y* 出力</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_M">
	<summary>M* 内部リレー</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_L">
	<summary>L* ラッチリレー</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_F">
	<summary>F* アナンシェータ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_V">
	<summary>V* エッジリレー</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_B">
	<summary>B* リンクリレー</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_D">
	<summary>D* データレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_W">
	<summary>W* リンクレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_TS">
	<summary>TS タイマ 接点</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_TC">
	<summary>TC タイマ コイル</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_TN">
	<summary>TN タイマ 現在値</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_SS">
	<summary>SS 積算タイマ 接点</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_SC">
	<summary>SC 積算タイマ コイル</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_SN">
	<summary>SN 積算タイマ 現在値</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_CS">
	<summary>CS カウンタ 接点</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_CC">
	<summary>CC カウンタ コイル</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_CN">
	<summary>CN カウンタ 現在値</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_SB">
	<summary>SB リンク特殊リレー</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_SW">
	<summary>SW リンク特殊レジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_S">
	<summary>S* ステップリレー</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_DX">
	<summary>DX ダイレクト入力</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_DY">
	<summary>DY ダイレクト出力</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_Z">
	<summary>Z* インデックスレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_R">
	<summary>R* ファイルレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DEV_ZR">
	<summary>ZR ファイルレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MC.DeviceCodeType.fBitDev">
	<summary>ビットデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLC_MC.DeviceCodeType.fWordDev">
	<summary>ワードデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLC_MC.DeviceCodeType.fBitOK">
	<summary>ビットデバイスかワードのビット指定でTrue</summary>
</member><member name="F:PLCCommLib.PLC_MC.DeviceCodeType.fWordOK">
	<summary>ワードデバイスかビットの16倍数区切りでTrue</summary>
</member><member name="F:PLCCommLib.PLC_MC.DeviceCodeType.fHex">
	<summary>デバイス番号の16進数指定でTrue</summary>
</member><member name="T:PLCCommLib.PLC_MC.DeviceCodeType">
	<summary>デバイス種別チェック用構造体</summary>
</member><member name="M:PLCCommLib.PLC_MC.#ctor">
	<summary>既定のコンストラクタ</summary>
</member><member name="P:PLCCommLib.PLC_MC.VenderName">
	<summary>PLCベンダ名を返す</summary>
	<remarks>VenderNames.MITSUBISHI(0)</remarks>
</member><member name="P:PLCCommLib.PLC_MC.ProtocolName">
	<summary>プロトコル名を返す</summary>
	<remarks>ProtocolNames.MC3E(0)</remarks>
</member><member name="M:PLCCommLib.PLC_MC.ReadDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括読出</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLC_MC.WriteDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の書込点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MC.SetBit(System.String)">
	<summary>ビットデバイスのセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MC.ResetBit(System.String)">
	<summary>ビットデバイスのリセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MC.InverseBit(System.String)">
	<summary>ビットデバイスの反転</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>プロトコル的にビット反転は不可なのでいったん読出後にセットorリセットを判別</remarks>
</member><member name="M:PLCCommLib.PLC_MC.ReadDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム読出</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLC_MC.WriteDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム書込</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MC.GetAvailableDeviceInfo">
	<summary>通信メソッドで利用可能なデバイス情報を取得</summary>
	<remarks>デバイス情報構造体の配列</remarks>
</member><member name="M:PLCCommLib.PLC_MC.SeparateDevice(System.String,System.Int32@,System.Int32@,System.Int32@)">
	<summary>デバイス名(文字列)をタイプと番号(数値)に変換</summary>
	<param name="Device">デバイス文字列</param>
	<param name="DevTyp">(出力)デバイス種別</param>
	<param name="DevNum">(出力)デバイス チャネル番号</param>
	<param name="BitNum">(出力)デバイス ビット番号 *ワードデバイスのBitアクセスのみ0～15、それ以外-1</param>
	<returns>変換OKでTrue、指定デバイス以外はFalse</returns>
</member><member name="M:PLCCommLib.PLC_MC.IsBitDevice(System.String)">
	<summary>デバイス文字列がビットデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ビットデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_MC.IsWordDevice(System.String)">
	<summary>デバイス文字列がワードデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_MC.IsWordAvailable(System.String)">
	<summary>デバイス文字列が通信メソッドでワードデバイス扱い可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
	<remarks>ワードデバイスかビットデバイスで番号が16の倍数でTrueを返す</remarks>
</member><member name="M:PLCCommLib.PLC_MC.RemakeDevice(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える(桁数等)</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">(Optional)デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MC.RemakeDeviceWord(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎にワード単位で整える *通信用</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">デバイス番号(チャネル単位)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MC.AdjustWordDevice(System.String)">
	<summary>ビットデバイスの文字列を番号が16の倍数又はビット番号0に揃える</summary>
	<param name="Device">ビットデバイス文字列</param>
	<returns>ワードデバイス扱い可能なデバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MC.JudgeDeviceType(System.Int32,System.Int32,System.Int32)">
	<summary>デバイスがビットかワードかワードのビットかを判別</summary>
	<param name="typ">SeparateDeviceで返されるデバイス種別</param>
	<param name="num">SeparateDeviceで返されるデバイス番号</param>
	<param name="bit">SeparateDeviceで返されるビット番号</param>
	<returns>DeviceCodeType構造体</returns>
</member><member name="M:PLCCommLib.PLC_MC.MakeHeaderAndCommandData(System.Int16,System.Int16,System.Int16,System.Int32@)">
	<summary>送信用ヘッダ＋コマンドデータ(各コマンドによって変わる要求データ以外)の作成</summary>
	<param name="Cmd">コマンド</param>
	<param name="SubCmd">サブコマンド</param>
	<param name="ReqLen">要求データ長(Byte単位)</param>
	<param name="DataLenIdx">(出力)要求データ長の格納位置Index</param>
	<returns>送信バッファの格納数(Byte単位)</returns>
</member><member name="M:PLCCommLib.PLC_MC.SetSendBufForDeviceInfoAsc(System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>送信バッファにデバイス情報を格納(Ascii用)</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="typ">デバイス種別</param>
	<param name="num">デバイス番号</param>
	<param name="fHex">デバイス番号が16進数でTrue</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_MC.SetSendBufForDataInfoAsc(System.Int32,System.Int16,System.Boolean)">
	<summary>送信バッファにデータを格納(Ascii用)</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="data">データ</param>
	<param name="fbyte">(Optional)2Byteデータ=4文字の場合False=既定、1Byteデータ=2文字の場合True</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_MC.SetSendBufForDeviceInfoBin(System.Int32,System.Int32,System.Int32)">
	<summary>送信バッファにデバイス情報を格納(Binary用)</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="typ">デバイス種別</param>
	<param name="num">デバイス番号</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_MC.CheckHeaderData(System.Int32,System.Int16@,System.Int32@,System.Int32@)">
	<summary>受信データのヘッダ情報チェック</summary>
	<param name="RecvLen">受信データバイト数</param>
	<param name="EndCode">(出力)終了コード ※正常は0、異常はエラーコード</param>
	<param name="ResIdx">(出力)応答データの格納位置Index ※読出コマンドのみ</param>
	<param name="ResLen">(出力)応答データのバイト数(終了コードを除く)</param>
	<returns>ヘッダ情報正常で0を返す(異常終了でもヘッダ情報が正常なら0)</returns>
	<remarks>サブヘッダ、応答データ長、終了コードのみチェック</remarks>
</member><member name="M:PLCCommLib.PLC_MC.WriteBitDevice(System.String,System.Boolean)">
	<summary>ビットデバイス1点の書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="fSet">0以外でSet、0でReset</param>
	<returns>正常で0を返す(異常時はエラーコード)</returns>
	<remarks></remarks>
</member><member name="M:PLCCommLib.PLC_MC.RemakeDevice(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える</summary>
	<param name="DevTyp">デバイス種別</param>
	<param name="DevNum">デバイス番号</param>
	<param name="BitNum">デバイス ビット番号 *WordのBitアクセスのみ0～15、それ以外-1</param>
	<param name="Offset">デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>オフセット値を加味してデバイス番号の最小値を下回る場合(負数もありえる)は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MC.GetDeviceCodeAsc(System.Int32)">
	<summary>MCプロトコルのAscii用デバイスコードを取得</summary>
	<param name="DevTyp">デバイス種別</param>
	<returns>MCプロトコル用Asciiデバイスコード</returns>
</member><member name="M:PLCCommLib.PLC_MC.GetDeviceCodeBin(System.Int32)">
	<summary>MCプロトコルのBinary用デバイスコードを取得</summary>
	<param name="DevTyp">デバイス種別</param>
	<returns>MCプロトコル用Binaryデバイスコード</returns>
</member><member name="T:PLCCommLib.PLC_MC">
	<summary>三菱 or KEYENCE MCプロトコル(3Eフレーム)の通信クラス</summary>
	<remarks>
 Q/Lシリーズに対応。
 QnA/Aシリーズは交信1回の点数が異なるので少ない点数なら使えるかも。
 iQ-Rはラベルとロングタイマ等(32Bit)以外ならだいたい使えるかも。
 三菱とKEYENCEで使用可能だがデバイスは三菱基準となる。
 KEYENCEで使用する場合タイマ・カウンタ現在値は16Bitのみ。
 </remarks>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_R">
	<summary>R リレー</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_B">
	<summary>B リンクリレー</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_MR">
	<summary>MR 内部補助リレー</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_LR">
	<summary>LR ラッチリレー</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_CR">
	<summary>CR コントロールリレー</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_DM">
	<summary>DM データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_EM">
	<summary>EM 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_FM">
	<summary>FM ファイルレジスタ(カレント)</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_ZF">
	<summary>ZF ファイルレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_W">
	<summary>W リンクレジスタ</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_T">
	<summary>T タイマ接点</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_TC">
	<summary>TC タイマ現在値</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_C">
	<summary>C カウンタ接点</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_CC">
	<summary>CC カウンタ現在値</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DEV_CM">
	<summary>CM コントロールメモリ</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DeviceCodeType.fBitDev">
	<summary>ビットデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DeviceCodeType.fWordDev">
	<summary>ワードデバイスでTrue</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DeviceCodeType.fBitOK">
	<summary>ビットデバイスかワードのビット指定でTrue</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DeviceCodeType.fWordOK">
	<summary>ワードデバイスかビットの16倍数区切りでTrue</summary>
</member><member name="F:PLCCommLib.PLC_MCKV.DeviceCodeType.fHex">
	<summary>デバイス番号の16進数指定でTrue</summary>
</member><member name="T:PLCCommLib.PLC_MCKV.DeviceCodeType">
	<summary>デバイス種別チェック用構造体</summary>
</member><member name="M:PLCCommLib.PLC_MCKV.#ctor">
	<summary>既定のコンストラクタ</summary>
</member><member name="P:PLCCommLib.PLC_MCKV.VenderName">
	<summary>PLCベンダ名を返す</summary>
	<remarks>VenderNames.KEYENCE(2)</remarks>
</member><member name="P:PLCCommLib.PLC_MCKV.ProtocolName">
	<summary>プロトコル名を返す</summary>
	<remarks>ProtocolNames.MC3E(0)</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.ReadDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括読出</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.WriteDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の書込点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.SetBit(System.String)">
	<summary>ビットデバイスのセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.ResetBit(System.String)">
	<summary>ビットデバイスのリセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.InverseBit(System.String)">
	<summary>ビットデバイスの反転</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>プロトコル的にビット反転は不可なのでいったん読出後にセットorリセットを判別</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.ReadDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム読出</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.WriteDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム書込</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.GetAvailableDeviceInfo">
	<summary>通信メソッドで利用可能なデバイス情報を取得</summary>
	<remarks>デバイス情報構造体の配列</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.SeparateDevice(System.String,System.Int32@,System.Int32@,System.Int32@)">
	<summary>デバイス名(文字列)をタイプと番号(数値)に変換</summary>
	<param name="Device">デバイス文字列</param>
	<param name="DevTyp">(出力)デバイス種別</param>
	<param name="DevNum">(出力)デバイス チャネル番号</param>
	<param name="BitNum">(出力)デバイス ビット番号 *ワードデバイスのBitアクセスのみ0～15、それ以外-1</param>
	<returns>変換OKでTrue、指定デバイス以外はFalse</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.SeparateDevice(System.String,System.Int32@,System.Int32@,System.Int32@,System.Boolean)">
	<summary>デバイス名(文字列)をタイプと番号(数値)に変換</summary>
	<param name="Device">デバイス文字列</param>
	<param name="DevTyp">(出力)デバイス種別</param>
	<param name="DevNum">(出力)デバイス チャネル番号</param>
	<param name="BitNum">(出力)デバイス ビット番号 *ワードデバイスのBitアクセスのみ0～15、それ以外-1</param>
	<param name="fCom">編集用変換はFalse、通信用変換はTrue(R, MR, LR, CRのデバイス番号を細工)</param>
	<returns>変換OKでTrue、指定デバイス以外はFalse</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.IsBitDevice(System.String)">
	<summary>デバイス文字列がビットデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ビットデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.IsWordDevice(System.String)">
	<summary>デバイス文字列がワードデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.IsWordAvailable(System.String)">
	<summary>デバイス文字列が通信メソッドでワードデバイス扱い可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
	<remarks>ワードデバイスかビットデバイスのビット番号が0でTrueを返す</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.RemakeDevice(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える(桁数等)</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">(Optional)デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.RemakeDeviceWord(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎にワード単位で整える *通信用</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">デバイス番号(チャネル単位)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.AdjustWordDevice(System.String)">
	<summary>ビットデバイスの文字列を番号が16の倍数又はビット番号0に揃える</summary>
	<param name="Device">ビットデバイス文字列</param>
	<returns>ワードデバイス扱い可能なデバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.JudgeDeviceType(System.Int32,System.Int32,System.Int32)">
	<summary>デバイスがビットかワードかワードのビットかを判別</summary>
	<param name="typ">SeparateDeviceで返されるデバイス種別</param>
	<param name="num">SeparateDeviceで返されるデバイス番号</param>
	<param name="bit">SeparateDeviceで返されるビット番号</param>
	<returns>DeviceCodeType構造体</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.MakeHeaderAndCommandData(System.Int16,System.Int16,System.Int16,System.Int32@)">
	<summary>送信用ヘッダ＋コマンドデータ(各コマンドによって変わる要求データ以外)の作成</summary>
	<param name="cmd">コマンド</param>
	<param name="SubCmd">サブコマンド</param>
	<param name="ReqLen">要求データ長(Byte単位)</param>
	<param name="DataLenIdx">(出力)要求データ長の格納位置Index</param>
	<returns>送信バッファの格納数(Byte単位)</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.SetSendBufForDeviceInfoAsc(System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>送信バッファにデバイス情報を格納(Ascii用)</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="typ">デバイス種別</param>
	<param name="num">デバイス番号</param>
	<param name="fHex">デバイス番号が16進数でTrue</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.SetSendBufForDataInfoAsc(System.Int32,System.Int16,System.Boolean)">
	<summary>送信バッファにデータを格納(Ascii用)</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="data">データ</param>
	<param name="fbyte">(Optional)2Byteデータ=4文字の場合False=既定、1Byteデータ=2文字の場合True</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.SetSendBufForDeviceInfoBin(System.Int32,System.Int32,System.Int32)">
	<summary>送信バッファにデバイス情報を格納(Binary用)</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="typ">デバイス種別</param>
	<param name="num">デバイス番号</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.CheckHeaderData(System.Int32,System.Int16@,System.Int32@,System.Int32@)">
	<summary>受信データのヘッダ情報チェック</summary>
	<param name="RecvLen">受信データバイト数</param>
	<param name="EndCode">(出力)終了コード ※正常は0、異常はエラーコード</param>
	<param name="ResIdx">(出力)応答データの格納位置Index ※読出コマンドのみ</param>
	<param name="ResLen">(出力)応答データのバイト数(終了コードを除く)</param>
	<returns>ヘッダ情報正常で0を返す(異常終了でもヘッダ情報が正常なら0)</returns>
	<remarks>サブヘッダ、応答データ長、終了コードのみチェック</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.WriteBitDevice(System.String,System.Boolean)">
	<summary>ビットデバイス1点の書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="fSet">0以外でSet、0でReset</param>
	<returns>正常で0を返す(異常時はエラーコード)</returns>
	<remarks></remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.RemakeDevice(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える</summary>
	<param name="DevTyp">デバイス種別</param>
	<param name="DevNum">デバイス番号</param>
	<param name="BitNum">デバイス ビット番号 *WordのBitアクセスのみ0～15、それ以外-1</param>
	<param name="Offset">デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>オフセット値を加味してデバイス番号の最小値を下回る場合(負数もありえる)は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_MCKV.GetDeviceCodeAsc(System.Int32)">
	<summary>MCプロトコルのAscii用デバイスコードを取得</summary>
	<param name="DevTyp">デバイス種別</param>
	<returns>MCプロトコル用Asciiデバイスコード</returns>
</member><member name="M:PLCCommLib.PLC_MCKV.GetDeviceCodeBin(System.Int32)">
	<summary>MCプロトコルのBinary用デバイスコードを取得</summary>
	<param name="DevTyp">デバイス種別</param>
	<returns>MCプロトコル用Binaryデバイスコード</returns>
</member><member name="T:PLCCommLib.PLC_MCKV">
	<summary>KEYENCE用 MCプロトコル(3Eフレーム)の通信クラス</summary>
	<remarks>
 KEYENCE用のデバイスで指定するMCプロトコル。
 上位リンクと比べると高速カウンタ・コンパレータ、ワークリレー・メモリ、トリマ、テンポラリメモリ、インデックスが使えない。
 タイマ・カウンタの現在値は16Bitアクセスとなる(PLC内は32Bit)。
 ランダム読出がプロトコル的に可能なのでツール用途ではこちらが便利かも。
 </remarks>
</member><member name="M:PLCCommLib.DataConv.Byte2Word(System.Byte,System.Byte)">
	<summary>Byteデータ(1Byte+1Byte)をWordデータ(2Byte)に変換</summary>
	<param name="LoByte">下位Byteデータ</param>
	<param name="HiByte">上位Byteデータ</param>
	<returns>Wordデータ</returns>
</member><member name="M:PLCCommLib.DataConv.Byte2DoubleWord(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>Byteデータ(1Byte+1Byte+1Byte+1Byte)をDoubleWordデータ(4Byte)に変換</summary>
	<param name="LLoByte">下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">上位Word側の上位Byteデータ(最上位Byte)</param>
	<returns>DoubleWordデータ</returns>
</member><member name="M:PLCCommLib.DataConv.Byte2Single(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>Byteデータ(1Byte+1Byte+1Byte+1Byte)をSingle/Floatデータ(4Byte)に変換</summary>
	<param name="LLoByte">下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">上位Word側の上位Byteデータ(最上位Byte)</param>
	<returns>Single/Floatデータ</returns>
</member><member name="M:PLCCommLib.DataConv.Word2Byte(System.Int16,System.Int32@,System.Int32@)">
	<summary>Wordデータ(2Byte)をByteデータ(1Byte+1Byte)に変換</summary>
	<param name="data">Wordデータ</param>
	<param name="LoByte">(出力)下位Byteデータ</param>
	<param name="HiByte">(出力)上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv.Word2Byte(System.Int16,System.Int16@,System.Int16@)">
	<summary>Wordデータ(2Byte)をByteデータ(1Byte+1Byte)に変換</summary>
	<param name="data">Wordデータ</param>
	<param name="LoByte">(出力)下位Byteデータ</param>
	<param name="HiByte">(出力)上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv.Word2Byte(System.Int16,System.Byte@,System.Byte@)">
	<summary>Wordデータ(2Byte)をByteデータ(1Byte+1Byte)に変換</summary>
	<param name="data">Wordデータ</param>
	<param name="LoByte">(出力)下位Byteデータ</param>
	<param name="HiByte">(出力)上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv.Word2DoubleWord(System.Int16,System.Int16)">
	<summary>Wordデータ(2Byte+2Byte)をDoubleWordデータ(4Byte)に変換</summary>
	<param name="LoWord">下位Wordデータ</param>
	<param name="HiWord">上位Wordデータ</param>
	<returns>DoubleWordデータ</returns>
</member><member name="M:PLCCommLib.DataConv.Word2Single(System.Int16,System.Int16)">
	<summary>Wordデータ(2Byte+2Byte)をSingle/Floatデータ(4Byte)に変換</summary>
	<param name="LoWord">下位Wordデータ</param>
	<param name="HiWord">上位Wordデータ</param>
	<returns>Single(Float)データ</returns>
</member><member name="M:PLCCommLib.DataConv.Word2Double(System.Int16,System.Int16,System.Int16,System.Int16)">
	<summary>Wordデータ(2Byte×4)をDoubleデータ(8Byte)に変換</summary>
	<param name="LLoWord">下位DoubleWord側の下位Wordデータ(最下位Word)</param>
	<param name="LHiWord">下位DoubleWord側の上位Wordデータ(下位から2番目)</param>
	<param name="HLoWord">上位DoubleWord側の下位Wordデータ(下位から3番目)</param>
	<param name="HHiWord">上位DoubleWord側の上位Wordデータ(最上位Word)</param>
	<returns>Doubleデータ</returns>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Byte(System.Int32)">
	<summary>DoubleWordデータ(4Byte)をByte配列に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<returns>Byte(4Byte)データ配列</returns>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Byte(System.Int32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
	<summary>DoubleWordデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Byte(System.Int32,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
	<summary>DoubleWordデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Byte(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>DoubleWordデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Word(System.Int32,System.Int16@,System.Int16@)">
	<summary>DoubleWordデータ(4Byte)をWordデータ(2Byte+2Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LoWord">(出力)下位Wordデータ</param>
	<param name="HiWord">(出力)上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Word(System.UInt32,System.Int16@,System.Int16@)">
	<summary>DoubleWordデータ(4Byte)をWordデータ(2Byte+2Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LoWord">(出力)下位Wordデータ</param>
	<param name="HiWord">(出力)上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Single(System.Int32)">
	<summary>DoubleWordデータ(4Byte)をSingle/Floatデータ(4Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<returns>Single/Floatデータ</returns>
</member><member name="M:PLCCommLib.DataConv.DoubleWord2Double(System.Int32,System.Int32)">
	<summary>DoubleWordデータ(4Byte+4Byte)をDoubleデータ(8Byte)に変換</summary>
	<param name="LoDWord">下位DoubleWordデータ</param>
	<param name="HiDWord">上位DoubleWordデータ</param>
	<returns>Doubleデータ</returns>
</member><member name="M:PLCCommLib.DataConv.Single2Byte(System.Single)">
	<summary>Single/Floatデータ(4Byte)をByte配列に変換</summary>
	<param name="data">Single(Float)データ</param>
	<returns>Byte(4Byte)データ配列</returns>
</member><member name="M:PLCCommLib.DataConv.Single2Byte(System.Single,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
	<summary>Single/Floatデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">Single(Float)データ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv.Single2Word(System.Single,System.Int16@,System.Int16@)">
	<summary>Single/Floatデータ(4Byte)をWordデータ(2Byte+2Byte)に変換</summary>
	<param name="data">Single/Floatデータ</param>
	<param name="LoWord">(出力)下位Wordデータ</param>
	<param name="HiWord">(出力)上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv.Single2DoubleWord(System.Single)">
	<summary>Single/Floatデータ(4Byte)をDoubleWord(4Byte)に変換</summary>
	<param name="data">Single(Float)データ</param>
	<returns>DoubleWordデータ</returns>
</member><member name="M:PLCCommLib.DataConv.Double2Byte(System.Double)">
	<summary>Doubleデータ(8Byte)をByte配列に変換</summary>
	<param name="data">Doubleデータ</param>
	<returns>Byte(8Byte)データ配列</returns>
</member><member name="M:PLCCommLib.DataConv.Double2Byte(System.Double,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
	<summary>Doubleデータ(8Byte)をByteデータ(1Byte×8)に変換</summary>
	<param name="data">Doubleデータ</param>
	<param name="Byte0">(出力)最下位Byteデータ</param>
	<param name="Byte1">(出力)下位から2番目のデータ</param>
	<param name="Byte2">(出力)下位から3番目のデータ</param>
	<param name="Byte3">(出力)下位から4番目のデータ</param>
	<param name="Byte4">(出力)下位から5番目のデータ</param>
	<param name="Byte5">(出力)下位から6番目のデータ</param>
	<param name="Byte6">(出力)下位から7番目のデータ</param>
	<param name="Byte7">(出力)最上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv.Double2Word(System.Double,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
	<summary>Doubleデータ(8Byte)をWordデータ(2Byte+2Byte+2Byte+2Byte)に変換</summary>
	<param name="data">Doubleデータ</param>
	<param name="LLoWord">(出力)下位DoubleWord側の下位Wordデータ</param>
	<param name="LHiWord">(出力)下位DoubleWord側の上位Wordデータ</param>
	<param name="HLoWord">(出力)上位DoubleWord側の下位Wordデータ</param>
	<param name="HHiWord">(出力)上位DoubleWord側の上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv.Double2DoubleWord(System.Double,System.Int32@,System.Int32@)">
	<summary>Doubleデータ(8Byte)をDoubleWord(4Byte+4Byte)に変換</summary>
	<param name="data">Doubleデータ</param>
	<param name="LoDWord">(出力)下位DoubleWordデータ</param>
	<param name="HiDWord">(出力)上位DoubleWordデータ</param>
</member><member name="M:PLCCommLib.DataConv.S2U(System.Int16)">
	<summary>符号付2Byteデータを符号無2Byteデータに変換</summary>
	<param name="data">符号付データ</param>
	<returns>符号無データ</returns>
</member><member name="M:PLCCommLib.DataConv.S2U(System.Int32)">
	<summary>符号付4Byteデータを符号無4Byteデータに変換</summary>
	<param name="data">符号付データ</param>
	<returns>符号無データ</returns>
</member><member name="M:PLCCommLib.DataConv.S2U(System.Int64)">
	<summary>符号付8Byteデータを符号無8Byteデータに変換</summary>
	<param name="data">符号付データ</param>
	<returns>符号無データ</returns>
</member><member name="M:PLCCommLib.DataConv.U2S(System.UInt16)">
	<summary>符号無2Byteデータを符号付2Byteデータに変換</summary>
	<param name="data">符号無データ</param>
	<returns>符号付データ</returns>
</member><member name="M:PLCCommLib.DataConv.U2S(System.UInt32)">
	<summary>符号無4Byteデータを符号付4Byteデータに変換</summary>
	<param name="data">符号無データ</param>
	<returns>符号付データ</returns>
</member><member name="M:PLCCommLib.DataConv.U2S(System.UInt64)">
	<summary>符号無8Byteデータを符号付8Byteデータに変換</summary>
	<param name="data">符号無データ</param>
	<returns>符号付データ</returns>
</member><member name="M:PLCCommLib.DataConv.Word2Ascii(System.Int16[],System.Boolean,System.Int32,System.Int32)">
	<summary>Wordデータ配列(2Byte配列)をAscii文字列データ(String)に変換</summary>
	<param name="data">Wordデータ配列</param>
	<param name="fHiLo">False:下位→上位Byteの順に変換、True:上位→下位Byteの順に変換</param>
	<param name="StartIndex">(Optional)変換開始の配列Index</param>
	<param name="CharNum">(Optional)変換文字数 ※未使用時は0以下を指定</param>
	<returns>Ascii文字列</returns>
	<remarks>PLC内では三菱は下位→上位(fHiLo=False)、OMRON・KEYENCEは上位→下位(fHiLo=True)で扱われる</remarks>
</member><member name="M:PLCCommLib.DataConv.Ascii2Word(System.String,System.Boolean,System.Int32,System.Int16[]@)">
	<summary>Ascii文字列データ(String)をWordデータ配列(2Byte配列)に変換</summary>
	<param name="AscString">Ascii文字列</param>
	<param name="fHiLo">False:下位→上位Byteの順に変換、True:上位→下位Byteの順に変換</param>
	<param name="MinCharNum">変換文字数 ※AscString文字数より大きい場合のみ0で埋める</param>
	<param name="data">(出力)Wordデータ配列</param>
	<returns>変換Wordデータ数(文字数ではない) ※Ascii文字以外が含まれている場合は-1を返す</returns>
	<remarks>
 呼び出し側で必要数の配列を確保すること
 PLC内では三菱は下位→上位(fHiLo=False)、OMRON・KEYENCEは上位→下位(fHiLo=True)で扱われる
 </remarks>
</member><member name="M:PLCCommLib.DataConv.BCD2BIN(System.Int16,System.Int16@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BCD2BIN(System.UInt16,System.UInt16@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BCD2BIN(System.Int32,System.Int32@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BCD2BIN(System.UInt32,System.UInt32@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.IsBCDDigit(System.Int32)">
	<summary>BCD Digit(4bit単位データ)が正常かチェック</summary>
	<param name="bcd">BCD Digitデータ</param>
	<returns>0～9でtrue、それ以外はfalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BIN2BCD(System.Int16,System.Int16@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BIN2BCD(System.UInt16,System.UInt16@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BIN2BCD(System.Int32,System.Int32@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BIN2BCD(System.UInt32,System.UInt32@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BIN2BCD(System.Int64,System.Int64@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv.BIN2BCD(System.UInt64,System.UInt64@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="T:PLCCommLib.DataConv">
	<summary>PC・PLCで扱われるデータの変換クラス</summary>
	<remarks>インスタンス生成せず、静的メソッドのみ。</remarks>
</member><member name="M:PLCCommLib.DataConv2.Byte2Word(System.Byte,System.Byte)">
	<summary>Byteデータ(1Byte+1Byte)をWordデータ(2Byte)に変換</summary>
	<param name="LoByte">下位Byteデータ</param>
	<param name="HiByte">上位Byteデータ</param>
	<returns>Wordデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.Byte2DoubleWord(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>Byteデータ(1Byte+1Byte+1Byte+1Byte)をDoubleWordデータ(4Byte)に変換</summary>
	<param name="LLoByte">下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">上位Word側の上位Byteデータ(最上位Byte)</param>
	<returns>DoubleWordデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.Byte2Single(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>Byteデータ(1Byte+1Byte+1Byte+1Byte)をSingle/Floatデータ(4Byte)に変換</summary>
	<param name="LLoByte">下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">上位Word側の上位Byteデータ(最上位Byte)</param>
	<returns>Single/Floatデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.Word2Byte(System.Int16,System.Int32@,System.Int32@)">
	<summary>Wordデータ(2Byte)をByteデータ(1Byte+1Byte)に変換</summary>
	<param name="data">Wordデータ</param>
	<param name="LoByte">(出力)下位Byteデータ</param>
	<param name="HiByte">(出力)上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv2.Word2Byte(System.Int16,System.Int16@,System.Int16@)">
	<summary>Wordデータ(2Byte)をByteデータ(1Byte+1Byte)に変換</summary>
	<param name="data">Wordデータ</param>
	<param name="LoByte">(出力)下位Byteデータ</param>
	<param name="HiByte">(出力)上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv2.Word2Byte(System.Int16,System.Byte@,System.Byte@)">
	<summary>Wordデータ(2Byte)をByteデータ(1Byte+1Byte)に変換</summary>
	<param name="data">Wordデータ</param>
	<param name="LoByte">(出力)下位Byteデータ</param>
	<param name="HiByte">(出力)上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv2.Word2DoubleWord(System.Int16,System.Int16)">
	<summary>Wordデータ(2Byte+2Byte)をDoubleWordデータ(4Byte)に変換</summary>
	<param name="LoWord">下位Wordデータ</param>
	<param name="HiWord">上位Wordデータ</param>
	<returns>DoubleWordデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.Word2Single(System.Int16,System.Int16)">
	<summary>Wordデータ(2Byte+2Byte)をSingle/Floatデータ(4Byte)に変換</summary>
	<param name="LoWord">下位Wordデータ</param>
	<param name="HiWord">上位Wordデータ</param>
	<returns>Single(Float)データ</returns>
</member><member name="M:PLCCommLib.DataConv2.Word2Double(System.Int16,System.Int16,System.Int16,System.Int16)">
	<summary>Wordデータ(2Byte×4)をDoubleデータ(8Byte)に変換</summary>
	<param name="LLoWord">下位DoubleWord側の下位Wordデータ(最下位Word)</param>
	<param name="LHiWord">下位DoubleWord側の上位Wordデータ(下位から2番目)</param>
	<param name="HLoWord">上位DoubleWord側の下位Wordデータ(下位から3番目)</param>
	<param name="HHiWord">上位DoubleWord側の上位Wordデータ(最上位Word)</param>
	<returns>Doubleデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Byte(System.Int32)">
	<summary>DoubleWordデータ(4Byte)をByte配列に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<returns>Byte(4Byte)データ配列</returns>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Byte(System.Int32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
	<summary>DoubleWordデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Byte(System.Int32,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
	<summary>DoubleWordデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Byte(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>DoubleWordデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Word(System.Int32,System.Int16@,System.Int16@)">
	<summary>DoubleWordデータ(4Byte)をWordデータ(2Byte+2Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LoWord">(出力)下位Wordデータ</param>
	<param name="HiWord">(出力)上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Word(System.UInt32,System.Int16@,System.Int16@)">
	<summary>DoubleWordデータ(4Byte)をWordデータ(2Byte+2Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<param name="LoWord">(出力)下位Wordデータ</param>
	<param name="HiWord">(出力)上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Single(System.Int32)">
	<summary>DoubleWordデータ(4Byte)をSingle/Floatデータ(4Byte)に変換</summary>
	<param name="data">DoubleWordデータ</param>
	<returns>Single/Floatデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.DoubleWord2Double(System.Int32,System.Int32)">
	<summary>DoubleWordデータ(4Byte+4Byte)をDoubleデータ(8Byte)に変換</summary>
	<param name="LoDWord">下位DoubleWordデータ</param>
	<param name="HiDWord">上位DoubleWordデータ</param>
	<returns>Doubleデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.Single2Byte(System.Single)">
	<summary>Single/Floatデータ(4Byte)をByte配列に変換</summary>
	<param name="data">Single(Float)データ</param>
	<returns>Byte(4Byte)データ配列</returns>
</member><member name="M:PLCCommLib.DataConv2.Single2Byte(System.Single,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
	<summary>Single/Floatデータ(4Byte)をByteデータ(1Byte+1Byte+1Byte+1Byte)に変換</summary>
	<param name="data">Single(Float)データ</param>
	<param name="LLoByte">(出力)下位Word側の下位Byteデータ(最下位Byte)</param>
	<param name="LHiByte">(出力)下位Word側の上位Byteデータ(下位から2番目)</param>
	<param name="HLoByte">(出力)上位Word側の下位Byteデータ(下位から3番目)</param>
	<param name="HHiByte">(出力)上位Word側の上位Byteデータ(最上位Byte)</param>
</member><member name="M:PLCCommLib.DataConv2.Single2Word(System.Single,System.Int16@,System.Int16@)">
	<summary>Single/Floatデータ(4Byte)をWordデータ(2Byte+2Byte)に変換</summary>
	<param name="data">Single/Floatデータ</param>
	<param name="LoWord">(出力)下位Wordデータ</param>
	<param name="HiWord">(出力)上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv2.Single2DoubleWord(System.Single)">
	<summary>Single/Floatデータ(4Byte)をDoubleWord(4Byte)に変換</summary>
	<param name="data">Single(Float)データ</param>
	<returns>DoubleWordデータ</returns>
</member><member name="M:PLCCommLib.DataConv2.Double2Byte(System.Double)">
	<summary>Doubleデータ(8Byte)をByte配列に変換</summary>
	<param name="data">Doubleデータ</param>
	<returns>Byte(8Byte)データ配列</returns>
</member><member name="M:PLCCommLib.DataConv2.Double2Byte(System.Double,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
	<summary>Doubleデータ(8Byte)をByteデータ(1Byte×8)に変換</summary>
	<param name="data">Doubleデータ</param>
	<param name="Byte0">(出力)最下位Byteデータ</param>
	<param name="Byte1">(出力)下位から2番目のデータ</param>
	<param name="Byte2">(出力)下位から3番目のデータ</param>
	<param name="Byte3">(出力)下位から4番目のデータ</param>
	<param name="Byte4">(出力)下位から5番目のデータ</param>
	<param name="Byte5">(出力)下位から6番目のデータ</param>
	<param name="Byte6">(出力)下位から7番目のデータ</param>
	<param name="Byte7">(出力)最上位Byteデータ</param>
</member><member name="M:PLCCommLib.DataConv2.Double2Word(System.Double,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
	<summary>Doubleデータ(8Byte)をWordデータ(2Byte+2Byte+2Byte+2Byte)に変換</summary>
	<param name="data">Doubleデータ</param>
	<param name="LLoWord">(出力)下位DoubleWord側の下位Wordデータ</param>
	<param name="LHiWord">(出力)下位DoubleWord側の上位Wordデータ</param>
	<param name="HLoWord">(出力)上位DoubleWord側の下位Wordデータ</param>
	<param name="HHiWord">(出力)上位DoubleWord側の上位Wordデータ</param>
</member><member name="M:PLCCommLib.DataConv2.Double2DoubleWord(System.Double,System.Int32@,System.Int32@)">
	<summary>Doubleデータ(8Byte)をDoubleWord(4Byte+4Byte)に変換</summary>
	<param name="data">Doubleデータ</param>
	<param name="LoDWord">(出力)下位DoubleWordデータ</param>
	<param name="HiDWord">(出力)上位DoubleWordデータ</param>
</member><member name="M:PLCCommLib.DataConv2.S2U(System.Int16)">
	<summary>符号付2Byteデータを符号無2Byteデータに変換</summary>
	<param name="data">符号付データ</param>
	<returns>符号無データ</returns>
</member><member name="M:PLCCommLib.DataConv2.S2U(System.Int32)">
	<summary>符号付4Byteデータを符号無4Byteデータに変換</summary>
	<param name="data">符号付データ</param>
	<returns>符号無データ</returns>
</member><member name="M:PLCCommLib.DataConv2.S2U(System.Int64)">
	<summary>符号付8Byteデータを符号無8Byteデータに変換</summary>
	<param name="data">符号付データ</param>
	<returns>符号無データ</returns>
</member><member name="M:PLCCommLib.DataConv2.U2S(System.UInt16)">
	<summary>符号無2Byteデータを符号付2Byteデータに変換</summary>
	<param name="data">符号無データ</param>
	<returns>符号付データ</returns>
</member><member name="M:PLCCommLib.DataConv2.U2S(System.UInt32)">
	<summary>符号無4Byteデータを符号付4Byteデータに変換</summary>
	<param name="data">符号無データ</param>
	<returns>符号付データ</returns>
</member><member name="M:PLCCommLib.DataConv2.U2S(System.UInt64)">
	<summary>符号無8Byteデータを符号付8Byteデータに変換</summary>
	<param name="data">符号無データ</param>
	<returns>符号付データ</returns>
</member><member name="M:PLCCommLib.DataConv2.Word2Ascii(System.Int16[],System.Boolean,System.Int32,System.Int32)">
	<summary>Wordデータ配列(2Byte配列)をAscii文字列データ(String)に変換</summary>
	<param name="data">Wordデータ配列</param>
	<param name="fHiLo">False:下位→上位Byteの順に変換、True:上位→下位Byteの順に変換</param>
	<param name="StartIndex">(Optional)変換開始の配列Index</param>
	<param name="CharNum">(Optional)変換文字数 ※未使用時は0以下を指定</param>
	<returns>Ascii文字列</returns>
	<remarks>PLC内では三菱は下位→上位(fHiLo=False)、OMRON・KEYENCEは上位→下位(fHiLo=True)で扱われる</remarks>
</member><member name="M:PLCCommLib.DataConv2.Ascii2Word(System.String,System.Boolean,System.Int32,System.Int16[]@)">
	<summary>Ascii文字列データ(String)をWordデータ配列(2Byte配列)に変換</summary>
	<param name="AscString">Ascii文字列</param>
	<param name="fHiLo">False:下位→上位Byteの順に変換、True:上位→下位Byteの順に変換</param>
	<param name="MinCharNum">変換文字数 ※AscString文字数より大きい場合のみ0で埋める</param>
	<param name="data">(出力)Wordデータ配列</param>
	<returns>変換Wordデータ数(文字数ではない) ※Ascii文字以外が含まれている場合は-1を返す</returns>
	<remarks>
 呼び出し側で必要数の配列を確保すること
 PLC内では三菱は下位→上位(fHiLo=False)、OMRON・KEYENCEは上位→下位(fHiLo=True)で扱われる
 </remarks>
</member><member name="M:PLCCommLib.DataConv2.BCD2BIN(System.Int16,System.Int16@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BCD2BIN(System.UInt16,System.UInt16@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BCD2BIN(System.Int32,System.Int32@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BCD2BIN(System.UInt32,System.UInt32@)">
	<summary>BCDコードをBinaryに変換</summary>
	<param name="bcd">BCDデータ</param>
	<param name="bin">(出力)Binaryデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.IsBCDDigit(System.Int32)">
	<summary>BCD Digit(4bit単位データ)が正常かチェック</summary>
	<param name="bcd">BCD Digitデータ</param>
	<returns>0～9でtrue、それ以外はfalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BIN2BCD(System.Int16,System.Int16@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BIN2BCD(System.UInt16,System.UInt16@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BIN2BCD(System.Int32,System.Int32@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BIN2BCD(System.UInt32,System.UInt32@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BIN2BCD(System.Int64,System.Int64@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="M:PLCCommLib.DataConv2.BIN2BCD(System.UInt64,System.UInt64@)">
	<summary>BinaryをBCDコードに変換</summary>
	<param name="bin">Binaryデータ</param>
	<param name="bcd">(出力)BCDデータ</param>
	<returns>変換可能でTrue、変換不可でFalseを返す</returns>
</member><member name="T:PLCCommLib.DataConv2">
	<summary>PC・PLCで扱われるデータの変換クラス</summary>
	<remarks>
 基本的にDataConvクラスと同じだがインスタンス生成が必要。
 COMの場合インスタンス生成しないと使えないのでVBAやVB6以前で使う場合はこちらを使う。
 </remarks>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_IO">
	<summary>CIO リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_W">
	<summary>W 内部リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_H">
	<summary>H 保持リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_A">
	<summary>A 特殊リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_T">
	<summary>T タイマ アップフラグ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_C">
	<summary>C カウンタ アップフラグ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_D">
	<summary>D データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E">
	<summary>E 拡張データメモリ(カレント)</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E0">
	<summary>E0 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E1">
	<summary>E1 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E2">
	<summary>E2 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E3">
	<summary>E3 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E4">
	<summary>E4 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E5">
	<summary>E5 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E6">
	<summary>E6 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E7">
	<summary>E7 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E8">
	<summary>E8 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E9">
	<summary>E9 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_EA">
	<summary>EA 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_EB">
	<summary>EB 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_EC">
	<summary>EC 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_ED">
	<summary>ED 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_EE">
	<summary>EE 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_EF">
	<summary>EF 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E10">
	<summary>E10 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E11">
	<summary>E11 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E12">
	<summary>E12 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E13">
	<summary>E13 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E14">
	<summary>E14 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E15">
	<summary>E15 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E16">
	<summary>E16 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E17">
	<summary>E17 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_BIT_E18">
	<summary>E18 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_IO">
	<summary>CIO リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_W">
	<summary>W 内部リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_H">
	<summary>H 保持リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_A">
	<summary>A 特殊リレー</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_T">
	<summary>T タイマ 現在値</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_C">
	<summary>C カウンタ 現在値</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_D">
	<summary>D データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E">
	<summary>E 拡張データメモリ(カレント)</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E0">
	<summary>E0 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E1">
	<summary>E1 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E2">
	<summary>E2 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E3">
	<summary>E3 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E4">
	<summary>E4 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E5">
	<summary>E5 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E6">
	<summary>E6 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E7">
	<summary>E7 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E8">
	<summary>E8 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E9">
	<summary>E9 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_EA">
	<summary>EA 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_EB">
	<summary>EB 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_EC">
	<summary>EC 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_ED">
	<summary>ED 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_EE">
	<summary>EE 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_EF">
	<summary>EF 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E10">
	<summary>E10 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E11">
	<summary>E11 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E12">
	<summary>E12 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E13">
	<summary>E13 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E14">
	<summary>E14 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E15">
	<summary>E15 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E16">
	<summary>E16 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E17">
	<summary>E17 拡張データメモリ</summary>
</member><member name="F:PLCCommLib.PLC_Fins.DEV_WORD_E18">
	<summary>E18 拡張データメモリ</summary>
</member><member name="M:PLCCommLib.PLC_Fins.#ctor">
	<summary>既定のコンストラクタ</summary>
</member><member name="P:PLCCommLib.PLC_Fins.VenderName">
	<summary>PLCベンダ名を返す</summary>
	<remarks>VenderNames.OMRON(1)</remarks>
</member><member name="P:PLCCommLib.PLC_Fins.ProtocolName">
	<summary>プロトコル名を返す</summary>
	<remarks>ProtocolNames.FINS(1)</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.Open">
	<summary>通信回線のオープン処理</summary>
	<returns>正常終了で0を返す</returns>
</member><member name="M:PLCCommLib.PLC_Fins.ReadDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括読出</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.WriteDeviceBlock(System.String,System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位一括書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="size">ワード単位の書込点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_Fins.SetBit(System.String)">
	<summary>ビットデバイスのセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_Fins.ResetBit(System.String)">
	<summary>ビットデバイスのリセット</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
</member><member name="M:PLCCommLib.PLC_Fins.InverseBit(System.String)">
	<summary>ビットデバイスの反転</summary>
	<param name="Device">デバイス文字列</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>プロトコル的にビット反転は不可なのでいったん読出後にセットorリセットを判別</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.ReadDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム読出</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">(出力)読出データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>data()は呼び出し側で配列領域を確保すること</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.WriteDeviceRandom(System.String[],System.Int32,System.Int16[]@)">
	<summary>デバイスのワード単位ランダム書込</summary>
	<param name="DeviceList">デバイス文字列</param>
	<param name="size">ワード単位の読出点数</param>
	<param name="data">書込データ</param>
	<returns>正常終了で0を返す(異常時はエラーコード)</returns>
	<remarks>ランダム書込の機能はプロトコル的にサポートされていないため、内部処理にて1点ずつ書込</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.GetAvailableDeviceInfo">
	<summary>通信メソッドで利用可能なデバイス情報を取得</summary>
	<remarks>デバイス情報構造体の配列</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.SeparateDevice(System.String,System.Int32@,System.Int32@,System.Int32@)">
	<summary>デバイス名(文字列)をタイプと番号(数値)に変換</summary>
	<param name="Device">デバイス文字列</param>
	<param name="DevTyp">(出力)デバイス種別</param>
	<param name="DevNum">(出力)デバイス チャネル番号</param>
	<param name="BitNum">(出力)デバイス ビット番号 *ワードデバイスのBitアクセスのみ0～15、それ以外-1</param>
	<returns>変換OKでTrue、指定デバイス以外はFalse</returns>
</member><member name="M:PLCCommLib.PLC_Fins.IsBitDevice(System.String)">
	<summary>デバイス文字列がビットデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ビットデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_Fins.IsWordDevice(System.String)">
	<summary>デバイス文字列がワードデバイスとして認識可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
</member><member name="M:PLCCommLib.PLC_Fins.IsWordAvailable(System.String)">
	<summary>デバイス文字列が通信メソッドでワードデバイス扱い可能か判別</summary>
	<param name="Device">デバイス文字列</param>
	<returns>ワードデバイスでTrueを返す</returns>
	<remarks>ワードデバイスでTrueを返す</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.RemakeDevice(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える(桁数等)</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">(Optional)デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.RemakeDeviceWord(System.String,System.Int32)">
	<summary>デバイスの文字列を種別毎にワード単位で整える *通信用</summary>
	<param name="Device">デバイス文字列</param>
	<param name="Offset">デバイス番号(チャネル単位)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.AdjustWordDevice(System.String)">
	<summary>ビットデバイスの文字列を番号が16の倍数又はビット番号0に揃える</summary>
	<param name="Device">ビットデバイス文字列</param>
	<returns>ワードデバイス扱い可能なデバイス文字列</returns>
	<remarks>デバイス名と認識できない場合は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.MakeFinsTCPHeader(System.Int32)">
	<summary>FINS/TCPヘッダデータの作成</summary>
	<param name="cmd">コマンドコード</param>
	<returns>送信バッファの格納数(Byte単位)</returns>
</member><member name="M:PLCCommLib.PLC_Fins.SetFinsTCPHeaderLength(System.Int32)">
	<summary>FINS/TCPヘッダにLength情報を設定(ヘッダのCommand以降のバイト数=全バイト数-8)</summary>
	<param name="length">全送信バイト数</param>
</member><member name="M:PLCCommLib.PLC_Fins.MakeHeaderAndCommandData(System.Int16)">
	<summary>送信用ヘッダ＋コマンドコード(各コマンドによって変わるテキストデータ以外)の作成</summary>
	<param name="cmd">FINSコマンドコード</param>
	<returns>送信バッファの格納数(Byte単位)</returns>
</member><member name="M:PLCCommLib.PLC_Fins.SetSendBufForDeviceInfo(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>送信バッファにデバイス情報を格納</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="typ">デバイス種別</param>
	<param name="num">デバイス番号</param>
	<param name="bit">デバイス ビット番号 *デバイス種別がワードの場合無視(0固定)</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_Fins.SetSendBufForSizeInfo(System.Int32,System.Int32)">
	<summary>送信バッファにデバイス点数を格納</summary>
	<param name="idx">データ挿入する送信バッファのIndex</param>
	<param name="size">デバイス点数</param>
	<returns>送信バッファに格納後のIndex</returns>
</member><member name="M:PLCCommLib.PLC_Fins.CheckHeaderData(System.Int32,System.Int16@,System.Int32@,System.Int32@)">
	<summary>受信データのヘッダ情報チェック</summary>
	<param name="RecvLen">受信データバイト数</param>
	<param name="EndCode">(出力)終了コード ※正常は0、異常はエラーコード</param>
	<param name="ResIdx">(出力)応答データの格納位置Index ※読出コマンドのみ</param>
	<param name="ResLen">(出力)応答データのバイト数(終了コードを除く)</param>
	<returns>ヘッダ情報正常で0を返す(異常終了でもヘッダ情報が正常なら0)</returns>
	<remarks>TCPヘッダ、応答データ長、終了コードのみチェック</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.WriteBitDevice(System.String,System.Boolean)">
	<summary>ビットデバイス1点の書込</summary>
	<param name="Device">デバイス文字列</param>
	<param name="fSet">0以外でSet、0でReset</param>
	<returns>正常で0を返す(異常時はエラーコード)</returns>
	<remarks></remarks>
</member><member name="M:PLCCommLib.PLC_Fins.GetFinsNodeAddressTCP">
	<summary>FINS/TCP時にFINSノードアドレスを取得</summary>
	<returns>正常で0を返す(異常時はエラーコード)</returns>
	<remarks>ノードアドレスはRoutePrm.sa1に格納</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.GetFinsNodeAddressUDP">
	<summary>FINS/UDP時にPC側IPアドレスからFINSノードアドレスを決定、取得</summary>
	<returns>正常で0を返す(異常時はエラーコード)</returns>
	<remarks>ノードアドレスはRoutePrm.sa1に格納</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.RemakeDevice(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>デバイスの文字列を種別毎に整える</summary>
	<param name="DevTyp">デバイス種別</param>
	<param name="DevNum">デバイス番号</param>
	<param name="BitNum">デバイス ビット番号 *WordのBitアクセスのみ0～15、それ以外-1</param>
	<param name="Offset">デバイス番号(チャネル・ビット)のオフセット</param>
	<returns>デバイス文字列</returns>
	<remarks>オフセット値を加味してデバイス番号の最小値を下回る場合(負数もありえる)は""(空の文字列)を返す</remarks>
</member><member name="M:PLCCommLib.PLC_Fins.GetDeviceCode(System.Int32)">
	<summary>FINS通信用デバイスコードを取得</summary>
	<param name="DevTyp">デバイス種別</param>
	<returns>FINS通信用デバイスコード</returns>
</member><member name="T:PLCCommLib.PLC_Fins">
	<summary>OMRON FINS(Ethernet)の通信クラス</summary>
	<remarks>
 CS/CJシリーズに対応。
 NJやNXシリーズでは変数にAT割付をすれば使えるハズ。
 プロトコル的にランダム書込が無い。
 </remarks>
</member>
</members>
</doc>